// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma init

generator client {
  provider = "prisma-client-js"
}

// https://www.prisma.io/docs/orm/overview/databases/mysql
// mysql://USER:PASSWORD@HOST:PORT/DATABASE <- DATABASE_URL
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int        @id @default(autoincrement()) @map("product_id")
  description String     @db.MediumText
  imageUrl    String
  name        String
  price       Int
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  CartItem    CartItem[]

  @@map("products")
}

model Cart {
  id       Int        @id @default(autoincrement()) @map("card_id")
  items    CartItem[]
  user_id  Int?
  user     User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createAt DateTime   @default(now())
  updateAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id         Int      @id @default(autoincrement()) @map("card_item_id")
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id Int
  card       Cart     @relation(fields: [card_id], references: [id], onDelete: Cascade)
  card_id    Int
  quantity   Int
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt

  @@map("cartitems")
}

// google auth
model Account {
  id                Int     @id @default(autoincrement()) @map("account_id")
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.MediumText
  access_token      String? @db.MediumText
  expires_at        Int?
  token_type        String? @db.MediumText
  scope             String? @db.MediumText
  id_token          String? @db.MediumText
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement()) @map("session_id")
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement()) @map("user_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]

  @@map("users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement()) @map("verification_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
